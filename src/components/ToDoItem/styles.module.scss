@use '../../styles/layout.module' as l;
@use '../../styles/text.module' as t;
@use '../../styles/colors.module' as c;

.container {
  @include l.useFlex($direction: row, $align: center);

  gap: 12px;
  padding: 12px 8px 12px 16px;
  border-bottom: 1px solid var(--c-outline);

  & :is(p, span)::selection {
    color: var(--c-surface);
    background-color: var(--c-primary);
  }

  &.isChecked {
    color: var(--c-on-surface-medium);
    text-decoration: line-through;
    font-style: italic;
  }

  &.isFocused {
    opacity: 1 !important;
  }
}

.isHeading {
  gap: 4px;
  padding: 24px 8px 12px 0;
  border-bottom: 1px solid var(--c-primary);
}

.headingIcon {
  @include t.useTitle;
  color: var(--c-on-surface-low);
}

.taskTitle {
  flex-grow: 1;
}

.headingTitle {
  @include t.useTitle;
  color: var(--c-primary);
  flex-grow: 1;
}

.boxCheckbox {
  @include l.useFlex($justify: center, $align: center);

  width: 32px;
  height: 32px;
  border-radius: 50%;
  border: 1px solid var(--c-on-surface-low);
  background-color: transparent;
  cursor: pointer;

  &:focus-visible {
    outline: 1px solid var(--c-primary);
  }

  &:active {
    transform: scale(97%);
  }

  .isChecked & {
    border: 1px solid var(--c-primary);
    background-color: var(--c-primary);
  }

  @media (hover: hover) {
    .isChecked &:hover {
      border: c.composeLayeredColor("primary", "on-primary", 1);
      background-color: c.composeLayeredColor("primary", "on-primary", 1);
    }
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(15%);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.boxCheckbox[data-state='checked'] .checkBoxIndicator {
  animation: fadeIn 200ms ease-out;
}