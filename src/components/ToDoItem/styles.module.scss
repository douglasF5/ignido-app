@use '../../styles/layout.module' as l;
@use '../../styles/text.module' as t;
@use '../../styles/colors.module' as c;

.container {
  @include l.useFlex($direction: row, $align: center);

  position: relative;
  gap: 12px;
  border-bottom: 1px solid var(--c-outline);
  background-color: var(--c-background);
  z-index: 1;

  &:not(.isHeading) {
    padding-left: 12px;
  }

  & ::selection {
    color: var(--c-surface);
    background-color: var(--c-primary);
  }

  &.isChecked {
    color: var(--c-on-surface-medium);
    text-decoration: line-through;
    font-style: italic;
  }

  &.isFocused {
    position: relative;
    background-color: var(--c-background);
    opacity: 1;
    z-index: 2;
  }

  &.isDragging {
    position: relative;
    -webkit-user-select: none;
    -ms-user-select: none;
    user-select: none;
    z-index: 8;
    background-color: rgba(c.getColor("primary"), 0.08);
  }

  &.isFocused.isDragging {
    z-index: 4;
  }
}

.isHeading {
  gap: 4px;
  border-bottom: 1px solid var(--c-primary);
}

.headingTitle {
  @include t.useTitle;
  padding: 24px 0 12px 0;
  color: var(--c-primary);
  flex-grow: 1;

  &:empty::before {
    content: 'Untitled heading';
    color: var(--c-on-surface-low);
  }
}

.headingIcon {
  @include t.useTitle;
  padding: 24px 0 12px 0;
  color: var(--c-on-surface-low);
}

.taskTitle {
  flex-grow: 1;
  padding: 16px 0 16px 0;

  &:empty::before {
    content: 'Untitled task';
    color: var(--c-on-surface-low);
  }
}

.boxCheckbox {
  @include l.useFlex($justify: center, $align: center);

  width: 32px;
  height: 32px;
  border-radius: 50%;
  border: 1px solid var(--c-primary);
  background-color: transparent;
  cursor: pointer;
  transition: background-color 100ms ease-in;

  &:focus-visible {
    outline: 1px solid var(--c-primary);
  }

  &:active {
    transform: scale(97%);
  }

  .isChecked & {
    background-color: var(--c-primary);
  }

  @media (hover: hover) {
    .isChecked &:hover {
      border: c.composeLayeredColor("primary", "on-primary", 1);
      background-color: c.composeLayeredColor("primary", "on-primary", 1);
    }
  }
}

@keyframes fadeOutCheckBox {
  from {
    background-color: var(--c-primary);
  }

  to {
    background-color: transparent;
  }
}

@keyframes fadeInCheckBox {
  from {
    background-color: transparent;
  }

  to {
    background-color: var(--c-primary);
  }
}

@keyframes fadeInCheckIndicator {
  from {
    opacity: 0;
    transform: translateY(15%);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeOutCheckIndicator {
  from {
    opacity: 1;
    transform: translateY(0);
  }

  to {
    opacity: 0;
    transform: translateY(15%);
  }
}

.boxCheckbox[data-state='checked'] {
  background-color: var(--c-primary);
}

.boxCheckbox[data-state='unchecked'] {
  background-color: transparent;
}

.checkBoxIndicator[data-state='checked'] {
  animation: fadeInCheckIndicator 200ms ease-out;
}

.checkBoxIndicator[data-state='unchecked'] {
  animation: fadeOutCheckIndicator 200ms ease-in;
}

.priorityIndicator {
  width: 14px;
}

.dragIndicator {
  opacity: 0;
  flex-shrink: 0;
  padding: 4px 2px;
  transform: translateX(15%);
  transition: opacity 100ms ease;
  cursor: grab;

  @media(hover: hover) {
    .container:hover & {
      opacity: 1;
    }
  }

  & img {
    pointer-events: none;
  }
}

.actionsBarWrapper {
  position: absolute;
  right: 0;
  top: 0;
  transform: translateY(-105%);
  z-index: 5;
}